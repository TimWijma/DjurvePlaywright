const { test, expect } = require('@playwright/test');
const { Login } = require('../../login');
const { Global, Menu, Basics, Acties } = require('../../objects')

test('ActionsFlow', async ({ page, browser }) => {
  const context = await browser.newContext()
  await page.goto(Global.url)

  await Login(page, "hendrik@djurve.nl")

  await page.click(Acties.ActionFlow.div_Interventie)
  await page.fill(Acties.inputName, "Er brand een rood lampje bij lijn 1")
  await page.fill(Basics['Comment-Description'], "Sinds gisteravond brand er een rood lampje bij lijn 1. Lijkt een storing.")
  await page.selectOption(Acties.selectReportingActor, "41ca13be-83bc-0526-8bd1-454f215dd1a3")
  await page.selectOption(Acties.selectLocation, "00000000-0000-0000-0000-000000000000")
  await page.click(Acties.buttonSave)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})

  await page.click(Menu.menuWorkstock)
  await page.click(Acties.Acties.li_first_action)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await expect(page.locator(Acties.ActionFlow.td_Status)).toHaveText("Geregistreerd")
  await page.click(Acties.buttonStartAction)
  await page.fill(Basics['Message-Description'], "Kun je deze oppakken?")
  await page.selectOption(Acties.selectActionActor, "41ca13be-83bc-0018-8bd1-454f215dd1a3")
  await page.selectOption(Acties.selectActionUser, "51da13be-83bc-494a-8bd1-454f215dd1a8")
  await page.click(Acties.buttonStartActionFromTask)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await expect(page.locator(Acties.ActionFlow.td_Status)).toHaveText("Gestart")
  await expect(page.locator(Acties.ActionFlow.td_currentowner)).toHaveText("Boris Boss")

  await page.click(Basics.account)
  await page.click(Basics.signoff)
  await Login(page, "boris@djurve.nl")

  await page.click(Acties.ActionFlow.div_assignment)
  await page.click(Acties.Acties.li_first_action)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await page.click(Acties.ActionFlow.button_Message)
  await page.fill(Basics['Message-Description'], "Vreemd")
  await page.click(Acties.ActionFlow.button_Send)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await page.click(Acties.ActionFlow.button_Accept)
  await page.click(Acties.ActionFlow.div_Message)
  await page.fill(Basics['Message-Description'], "Geen idee wat het is, maar ik pak het op.")
  await page.click(Acties.ActionFlow.button_Send)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await expect(page.locator('//*[@class="action-table-firstcolumn"]/parent::*//*[@id="status"]')).toBeVisible()
  await expect(page.locator(Acties.ActionFlow.td_Status)).toHaveText("Accepted")
  await page.click(Acties.ActionFlow['button_Not solved'])
  await page.fill(Basics['Message-Description'], "Sorry, ik kon het niet oplossen. Technische dienst moet er naar kijken.")
  await page.click(Acties.ActionFlow.button_Send)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})

  await page.click(Basics.account)
  await page.click(Basics.signoff)
  await Login(page, "hendrik@djurve.nl")

  await page.click(Acties.ActionFlow.div_assignment)
  await page.click(Acties.Acties.li_first_action)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await expect(page.locator(Acties.ActionFlow.td_Status)).toHaveText("Niet opgelost")
  await page.click(Acties.ActionFlow.button_Doorsturen)
  await page.fill(Basics['Message-Description'], "Blijkt bij jullie te horen te liggen. Kunnen jullie deze oppakken?")
  await page.selectOption(Acties.selectActionActor, "41ca13be-83bc-0799-8bd1-454f215dd1a3")
  await page.selectOption(Acties.selectActionUser, "51da13be-83bc-494a-8bd1-454f215dd1a9")
  await page.click(Acties.buttonStartActionFromTask)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  
  await page.click(Basics.account)
  await page.click(Basics.signoff)
  await Login(page, "leo@djurve.nl")

  await page.click(Acties.ActionFlow.div_assignment)
  await page.click(Acties.Acties.li_first_action)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await expect(page.locator(Acties.ActionFlow.td_Status)).toHaveText("Forwarded")
  await page.click(Acties.ActionFlow.button_Accept)
  await page.fill(Basics['Message-Description'], "Ga ik fixen. Ik weet wat het is.")
  await page.click(Acties.ActionFlow.button_Send)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await page.click(Acties.ActionFlow.button_Solved)
  await page.fill(Basics['Message-Description'], "Is opgelost.")
  await page.click(Acties.ActionFlow.button_Send)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})

  await page.click(Basics.account)
  await page.click(Basics.signoff)
  await Login(page, "hendrik@djurve.nl")

  await page.click(Acties.ActionFlow.div_assignment)
  await page.click(Acties.Acties.li_first_action)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await expect(page.locator(Acties.ActionFlow.td_Status)).toHaveText("Opgelost")
  await page.click(Acties.ActionFlow.button_Afsluiten)
  await page.fill(Basics['Message-Description'], "Probleem is uit de wereld!")
  await page.click(Acties.ActionFlow.button_Send)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await page.click(Acties.ActionFlow.a_listRegistraties)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await page.waitForTimeout(1000);
  await page.click('#extrafilterclosed')
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await page.click(Acties.Acties.li_first_action)
  await page.locator(Basics.ProgressBar).first().waitFor({state: 'hidden'})
  await expect(page.locator(Acties.ActionFlow.td_Status)).toHaveText("Gesloten")

  await context.close()
});